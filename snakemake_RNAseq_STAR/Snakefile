# Snakemake workflow for mapping RNA-seq libraries to a reference genome

# Chromosome sizes file below ("data/index/genome.fa.sizes") must exist
# before running snakefile
# e.g., in "data/index/" run:
# samtools faidx genome.fa; cut -f1,2 genome.fa.fai > genome.fa.sizes

# Usage (snakemake --cores should reflect available cores):
# conda env create --file environment.yaml --name RNAseq_mapping
# source activate RNAseq_mapping
# snakemake -p --cores 48
# conda deactivate

import pandas as pd
import os

# To make the per_base_coverage rule work with a shell script invoked using the "shell" directive,
# we need to determine the base path of Snakefile since we expect the scripts directory to be there as well
SRCDIR = srcdir("")

# Specify config file parameters
configfile: "config.yaml"
sample        = config["SAMPLES"]
reference     = config["MAPPING"]["reference"]
refbase       = os.path.basename(reference)
genomeBinName = config["COVERAGE"]["genomeBinName"]

# Determine bam index format (bai or csi) based on chromosome sizes
# Genomes with chromosomes longer than ~500 Mb (e.g., in wheat) require a csi index
# E.g., in axolotl: https://sourceforge.net/p/samtools/mailman/message/36249039/
chrSizes = pd.read_table("data/index/" + refbase + ".fa.sizes",
                         header = None)
smallChrs = 0
for x in chrSizes[1]:
    if x < 5e+08:
        smallChrs = smallChrs + 1

if smallChrs < len(chrSizes[1]):
    bamidx = "csi"
else:
    bamidx = "bai"

# Specify the desired end target file(s)
rule all:
    input:
        expand("logs/fastqc/raw/{sample}_fastqc.html",
               sample = sample),
        expand("data/{sample}_rRNAremoved.fastq.gz",
               sample = sample),
        expand("data/trimmed/{sample}_rRNAremoved_trimmed.fastq.gz",
               sample = sample),
        expand("logs/fastqc/trimmed/{sample}_rRNAremoved_trimmed_fastqc.html",
               sample = sample),
        expand("mapped/{sample}_Aligned.out.bam",
               sample = sample),
        expand("mapped/both/{sample}_MappedOn_{refbase}_both_sort.bam",
               sample = sample,
               refbase = refbase),
        expand("mapped/unique/{sample}_MappedOn_{refbase}_unique_sort.bam",
               sample = sample,
               refbase = refbase),
        expand("mapped/unique/{sample}_MappedOn_{refbase}_unique_sort.bam.{bamidx}",
               sample = sample,
               refbase = refbase,
               bamidx = bamidx),
        expand("mapped/unique/bw/{sample}_MappedOn_{refbase}_unique_sort_norm.bw",
               sample = sample,
               refbase = refbase),
        expand("mapped/unique/bg/{sample}_MappedOn_{refbase}_unique_sort_norm.bedgraph",
               sample = sample,
               refbase = refbase),
        expand("mapped/unique/bg/{sample}_MappedOn_{refbase}_unique_sort_norm_binSize{genomeBinName}.bedgraph",
               sample = sample,
               refbase = refbase,
               genomeBinName = genomeBinName),
        expand("mapped/both/{sample}_MappedOn_{refbase}_both_sort.bam.{bamidx}",
               sample = sample,
               refbase = refbase,
               bamidx = bamidx),
        expand("mapped/both/bw/{sample}_MappedOn_{refbase}_both_sort_norm.bw",
               sample = sample,
               refbase = refbase),
        expand("mapped/both/bg/{sample}_MappedOn_{refbase}_both_sort_norm.bedgraph",
               sample = sample,
               refbase = refbase),
        expand("mapped/both/bg/{sample}_MappedOn_{refbase}_both_sort_norm_binSize{genomeBinName}.bedgraph",
               sample = sample,
               refbase = refbase,
               genomeBinName = genomeBinName),
        expand("mapped/unique/pb/{sample}_MappedOn_{refbase}_unique_sort_norm.perbase",
               sample = sample,
               refbase = refbase),
        expand("mapped/both/pb/{sample}_MappedOn_{refbase}_both_sort_norm.perbase",
               sample = sample,
               refbase = refbase)

# Run fastqc on raw data
rule fastqc_raw:
    """Create fastqc report"""
    input:
        "data/{sample}.fastq.gz"
    output:
        html = "logs/fastqc/raw/{sample}_fastqc.html",
        zip  = "logs/fastqc/raw/{sample}_fastqc.zip"
    params:
        " --extract" +
        " --adapters " + str(config["FILTER"]["fastqc"]["contaminants"])
    log:
        "logs/fastqc/raw/{sample}.log"
    wrapper:
        "0.31.1/bio/fastqc"

# Remove rRNA
rule bbduk:
    """Remove rRNA"""
    input:
        "data/{sample}.fastq.gz"
    output:
        rRNA    = "data/{sample}_rRNA.fastq.gz",
        nonrRNA = "data/{sample}_rRNAremoved.fastq.gz"
    threads: config["THREADS"]
    params:
        memory    = config["MEMORY"],
        kmerSize  = config["FILTER"]["bbduk"]["kmerSize"],
        rRNAfasta = config["FILTER"]["bbduk"]["rRNAfasta"]
    log:
        "logs/bbduk/{sample}_rRNAremoved.log"
    shell:
        "(bbduk.sh -Xmx{params.memory}"
        "          in={input}"
        "          outmatch={output.rRNA}"
        "          outnonmatch={output.nonrRNA}"
        "          k={params.kmerSize}"
        "          ref={params.rRNAfasta}"
        "          threads={threads}) &> {log}"
    
# Trim off adapters and low-quality bases
rule trimmomatic:
    """Remove adapters and low-quality bases"""
    input:
        "data/{sample}_rRNAremoved.fastq.gz"
    output:
        "data/trimmed/{sample}_rRNAremoved_trimmed.fastq.gz"
    threads: config["THREADS"]
    params:
        # List of trimming paramters (see Trimmomatic manual)
        trimmer = [str(config["FILTER"]["trimmomatic"]["ILLUMINACLIP"]),
                   str(config["FILTER"]["trimmomatic"]["HEADCROP"]),
                   str(config["FILTER"]["trimmomatic"]["CROP"]),
                   str(config["FILTER"]["trimmomatic"]["SLIDINGWINDOW"]),
                   str(config["FILTER"]["trimmomatic"]["LEADING"]),
                   str(config["FILTER"]["trimmomatic"]["TRAILING"]),
                   str(config["FILTER"]["trimmomatic"]["MINLEN"])]
    log:
        "logs/trimmomatic/{sample}_rRNAremoved_trimmed.log"
    shell:
        "(trimmomatic SE -threads {threads}"
        "             {input}"
        "             {output}"
        "             {params.trimmer}) &> {log}"

# Run fastqc on trimmed data
rule fastqc_trimmed:
    """Create fastqc report"""
    input:
        "data/trimmed/{sample}_rRNAremoved_trimmed.fastq.gz"
    output:
        html = "logs/fastqc/trimmed/{sample}_rRNAremoved_trimmed_fastqc.html",
        zip  = "logs/fastqc/trimmed/{sample}_rRNAremoved_trimmed_fastqc.zip"
    params:
        " --extract" +
        " --adapters " + str(config["FILTER"]["fastqc"]["contaminants"])
    log:
        "logs/fastqc/trimmed/{sample}_rRNAremoved_trimmed.log"
    wrapper:
        "0.31.1/bio/fastqc"

# Align to the reference genome
rule STAR:
    """Obtain unique and multiple alignments using STAR"""
    input:
        "data/trimmed/{sample}_rRNAremoved_trimmed.fastq.gz"
    output:
        protected("mapped/{sample}_Aligned.out.bam")
    params:
        alignments = config["MAPPING"]["alignments"],
        mismatches = config["MAPPING"]["mismatches"],
        outprefix  = "mapped/{sample}_"
    threads: config["THREADS"]
    log:
        "logs/STAR/{sample}.log"
    shell:
        "(STAR --runThreadN {threads}"
        "      --genomeDir data/index/"
        "      --readFilesIn {input}"
        "      --readFilesCommand zcat"
        "      --outSAMtype BAM Unsorted"
        "      --outFileNamePrefix {params.outprefix}"
        "      --outFilterMultimapNmax {params.alignments}"
        "      --outMultimapperOrder Random"
        "      --outFilterMismatchNmax {params.mismatches}"
        "      --outSAMattributes All"
        "      --twopassMode Basic"
        "      --twopass1readsN -1"
        "      --quantMode TranscriptomeSAM GeneCounts) &> {log}"

# Extract unique and multiple  alignments
rule samtools:
    """Extract unique and multiple alignments using samtools"""
    input:
        "mapped/{sample}_Aligned.out.bam"
    output:
        both   = protected("mapped/both/{sample}_MappedOn_{refbase}_both_sort.bam"),
        unique = protected("mapped/unique/{sample}_MappedOn_{refbase}_unique_sort.bam")
    params:
        sortMemory = config["MAPPING"]["sortMemory"],
        MAPQboth  = config["MAPPING"]["MAPQboth"],
        MAPQunique = config["MAPPING"]["MAPQunique"]
    threads: config["THREADS"]
    log:
        both   = "logs/samtools/{sample}_mappedon_{refbase}_both_sort.log",
        unique = "logs/samtools/{sample}_mappedon_{refbase}_unique_sort.log"
    shell:
       # -F 2308 excludes unmapped reads,
       # as well as secondary and supplementary alignments
       "(samtools view -uh -@ {threads} -F 2308 {input} -q {params.MAPQboth} "
       "| samtools sort -@ {threads} -m {params.sortMemory} -o {output.both}) &> {log.both}; "
       "(samtools view -uh -@ {threads} -F 2308 {input} -q {params.MAPQunique} "
       "| samtools sort -@ {threads} -m {params.sortMemory} -o {output.unique}) &> {log.unique}"

# Postmapping steps:
# Index BAM files (index format [bai or csi] depends on chromosome sizes)
# Generate samtools flagstat and idxstats
# Calculate library-size-normalised coverage
if bamidx == "bai":
    rule postmapping:
        """bam.bai samtools flagstat idxstats"""
        input:
            uniqueBAM = "mapped/unique/{sample}_MappedOn_{refbase}_unique_sort.bam",
            bothBAM   = "mapped/both/{sample}_MappedOn_{refbase}_both_sort.bam"
        output:
            uniqueBAM = "mapped/unique/{sample}_MappedOn_{refbase}_unique_sort.bam.{bamidx}",
            bothBAM   = "mapped/both/{sample}_MappedOn_{refbase}_both_sort.bam.{bamidx}"
        log:
            uniqueflagstat = "logs/samtools/stats/{sample}_MappedOn_{refbase}_unique_sort_flagstat.log",
            bothflagstat   = "logs/samtools/stats/{sample}_MappedOn_{refbase}_both_sort_flagstat.log",
            uniqueidxstats = "logs/samtools/stats/{sample}_MappedOn_{refbase}_unique_sort_idxstats.log",
            bothidxstats   = "logs/samtools/stats/{sample}_MappedOn_{refbase}_both_sort_idxstats.log"
        shell:
            """
            samtools index    {input.uniqueBAM}
            samtools flagstat {input.uniqueBAM} > {log.uniqueflagstat}
            samtools idxstats {input.uniqueBAM} > {log.uniqueidxstats}
            samtools index    {input.bothBAM}
            samtools flagstat {input.bothBAM} > {log.bothflagstat}
            samtools idxstats {input.bothBAM} > {log.bothidxstats}
            """
    rule calc_coverage:
        """Calculate library-size-normalized coverage"""
        input:
            uniqueBAM = "mapped/unique/{sample}_MappedOn_{refbase}_unique_sort.bam",
            bothBAM   = "mapped/both/{sample}_MappedOn_{refbase}_both_sort.bam",
            uniqueBAMidx = "mapped/unique/{sample}_MappedOn_{refbase}_unique_sort.bam.bai",
            bothBAMidx   = "mapped/both/{sample}_MappedOn_{refbase}_both_sort.bam.bai"
        output:
            uniqueBW = "mapped/unique/bw/{sample}_MappedOn_{refbase}_unique_sort_norm.bw",
            bothBW   = "mapped/both/bw/{sample}_MappedOn_{refbase}_both_sort_norm.bw",
            uniqueBG = "mapped/unique/bg/{sample}_MappedOn_{refbase}_unique_sort_norm.bedgraph",
            bothBG   = "mapped/both/bg/{sample}_MappedOn_{refbase}_both_sort_norm.bedgraph"
        params:
            normalizeUsing         = config["COVERAGE"]["normalizeUsing"],
            binSize                = config["COVERAGE"]["binSize"]
        log:
            unique = "logs/bamCoverage/{sample}_MappedOn_{refbase}_unique_sort_norm.log",
            both   = "logs/bamCoverage/{sample}_MappedOn_{refbase}_both_sort_norm.log"
        threads: config["THREADS"]  
        shell:
            "(bamCoverage -b {input.uniqueBAM} -o {output.uniqueBW}"
            " --normalizeUsing {params.normalizeUsing}"
            " --binSize {params.binSize} -p {threads}; "
            "bamCoverage -b {input.uniqueBAM} -o {output.uniqueBG} -of bedgraph"
            " --normalizeUsing {params.normalizeUsing}"
            " --binSize {params.binSize} -p {threads}) &> {log.unique}; "
            "(bamCoverage -b {input.bothBAM} -o {output.bothBW}"
            " --normalizeUsing {params.normalizeUsing}"
            " --binSize {params.binSize} -p {threads}; "
            "bamCoverage -b {input.bothBAM} -o {output.bothBG} -of bedgraph"
            " --normalizeUsing {params.normalizeUsing}"
            " --binSize {params.binSize} -p {threads}) &> {log.both}"
    rule calc_coverage_genome:
        """Calculate library-size-normalized coverage in adjacent windows"""
        input:
            uniqueBAM = "mapped/unique/{sample}_MappedOn_{refbase}_unique_sort.bam",
            bothBAM   = "mapped/both/{sample}_MappedOn_{refbase}_both_sort.bam",
            uniqueBAMidx = "mapped/unique/{sample}_MappedOn_{refbase}_unique_sort.bam.bai",
            bothBAMidx   = "mapped/both/{sample}_MappedOn_{refbase}_both_sort.bam.bai"
        output:
            uniqueBGgenome = "mapped/unique/bg/{sample}_MappedOn_{refbase}_unique_sort_norm_binSize{genomeBinName}.bedgraph",
            bothBGgenome   = "mapped/both/bg/{sample}_MappedOn_{refbase}_both_sort_norm_binSize{genomeBinName}.bedgraph"
        params:
            normalizeUsing         = config["COVERAGE"]["normalizeUsing"],
            genomeBinSize          = config["COVERAGE"]["genomeBinSize"]
        log:
            unique = "logs/bamCoverage/{sample}_MappedOn_{refbase}_unique_sort_norm_binSize{genomeBinName}.log",
            both   = "logs/bamCoverage/{sample}_MappedOn_{refbase}_both_sort_norm_binSize{genomeBinName}.log"
        threads: config["THREADS"]  
        shell:
            "(bamCoverage -b {input.uniqueBAM} -o {output.uniqueBGgenome} -of bedgraph"
            " --normalizeUsing {params.normalizeUsing}"
            " --binSize {params.genomeBinSize} -p {threads}) &> {log.unique}; "
            "(bamCoverage -b {input.bothBAM} -o {output.bothBGgenome} -of bedgraph"
            " --normalizeUsing {params.normalizeUsing}"
            " --binSize {params.genomeBinSize} -p {threads}) &> {log.both}"
else:
    rule postmapping:
        """bam.csi samtools flagstat idxstats"""
        input:
            uniqueBAM = "mapped/unique/{sample}_MappedOn_{refbase}_unique_sort.bam",
            bothBAM   = "mapped/both/{sample}_MappedOn_{refbase}_both_sort.bam"
        output:
            uniqueBAM = "mapped/unique/{sample}_MappedOn_{refbase}_unique_sort.bam.{bamidx}",
            bothBAM   = "mapped/both/{sample}_MappedOn_{refbase}_both_sort.bam.{bamidx}"
        log:
            uniqueflagstat = "logs/samtools/stats/{sample}_MappedOn_{refbase}_unique_sort_flagstat.log",
            bothflagstat   = "logs/samtools/stats/{sample}_MappedOn_{refbase}_both_sort_flagstat.log",
            uniqueidxstats = "logs/samtools/stats/{sample}_MappedOn_{refbase}_unique_sort_idxstats.log",
            bothidxstats   = "logs/samtools/stats/{sample}_MappedOn_{refbase}_both_sort_idxstats.log"
        shell:
            """
            samtools index -c -m 14 {input.uniqueBAM}
            samtools flagstat       {input.uniqueBAM} > {log.uniqueflagstat}
            samtools idxstats       {input.uniqueBAM} > {log.uniqueidxstats}
            samtools index -c -m 14 {input.bothBAM}
            samtools flagstat       {input.bothBAM} > {log.bothflagstat}
            samtools idxstats       {input.bothBAM} > {log.bothidxstats}
            """
    rule calc_coverage:
        """Calculate library-size-normalized coverage"""
        input:
            uniqueBAM = "mapped/unique/{sample}_MappedOn_{refbase}_unique_sort.bam",
            bothBAM   = "mapped/both/{sample}_MappedOn_{refbase}_both_sort.bam",
            uniqueBAMidx = "mapped/unique/{sample}_MappedOn_{refbase}_unique_sort.bam.csi",
            bothBAMidx   = "mapped/both/{sample}_MappedOn_{refbase}_both_sort.bam.csi"
        output:
            uniqueBW = "mapped/unique/bw/{sample}_MappedOn_{refbase}_unique_sort_norm.bw",
            bothBW   = "mapped/both/bw/{sample}_MappedOn_{refbase}_both_sort_norm.bw",
            uniqueBG = "mapped/unique/bg/{sample}_MappedOn_{refbase}_unique_sort_norm.bedgraph",
            bothBG   = "mapped/both/bg/{sample}_MappedOn_{refbase}_both_sort_norm.bedgraph"
        params:
            normalizeUsing         = config["COVERAGE"]["normalizeUsing"],
            binSize                = config["COVERAGE"]["binSize"]
        log:
            unique = "logs/bamCoverage/{sample}_MappedOn_{refbase}_unique_sort_norm.log",
            both   = "logs/bamCoverage/{sample}_MappedOn_{refbase}_both_sort_norm.log"
        threads: config["THREADS"]  
        shell:
            "(bamCoverage -b {input.uniqueBAM} -o {output.uniqueBW}"
            " --normalizeUsing {params.normalizeUsing}"
            " --binSize {params.binSize} -p {threads}; "
            "bamCoverage -b {input.uniqueBAM} -o {output.uniqueBG} -of bedgraph"
            " --normalizeUsing {params.normalizeUsing}"
            " --binSize {params.binSize} -p {threads}) &> {log.unique}; "
            "(bamCoverage -b {input.bothBAM} -o {output.bothBW}"
            " --normalizeUsing {params.normalizeUsing}"
            " --binSize {params.binSize} -p {threads}; "
            "bamCoverage -b {input.bothBAM} -o {output.bothBG} -of bedgraph"
            " --normalizeUsing {params.normalizeUsing}"
            " --binSize {params.binSize} -p {threads}) &> {log.both}"
    rule calc_coverage_genome:
        """Calculate library-size-normalized coverage in adjacent windows"""
        input:
            uniqueBAM = "mapped/unique/{sample}_MappedOn_{refbase}_unique_sort.bam",
            bothBAM   = "mapped/both/{sample}_MappedOn_{refbase}_both_sort.bam",
            uniqueBAMidx = "mapped/unique/{sample}_MappedOn_{refbase}_unique_sort.bam.csi",
            bothBAMidx   = "mapped/both/{sample}_MappedOn_{refbase}_both_sort.bam.csi"
        output:
            uniqueBGgenome = "mapped/unique/bg/{sample}_MappedOn_{refbase}_unique_sort_norm_binSize{genomeBinName}.bedgraph",
            bothBGgenome   = "mapped/both/bg/{sample}_MappedOn_{refbase}_both_sort_norm_binSize{genomeBinName}.bedgraph"
        params:
            normalizeUsing         = config["COVERAGE"]["normalizeUsing"],
            genomeBinSize          = config["COVERAGE"]["genomeBinSize"]
        log:
            unique = "logs/bamCoverage/{sample}_MappedOn_{refbase}_unique_sort_norm_binSize{genomeBinName}.log",
            both   = "logs/bamCoverage/{sample}_MappedOn_{refbase}_both_sort_norm_binSize{genomeBinName}.log"
        threads: config["THREADS"]  
        shell:
            "(bamCoverage -b {input.uniqueBAM} -o {output.uniqueBGgenome} -of bedgraph"
            " --normalizeUsing {params.normalizeUsing}"
            " --binSize {params.genomeBinSize} -p {threads}) &> {log.unique}; "
            "(bamCoverage -b {input.bothBAM} -o {output.bothBGgenome} -of bedgraph"
            " --normalizeUsing {params.normalizeUsing}"
            " --binSize {params.genomeBinSize} -p {threads}) &> {log.both}"

rule per_base_coverage:
    """Convert bedgraph to per-base 1-based coverage file"""
    input:
        unique = "mapped/unique/bg/{sample}_MappedOn_{refbase}_unique_sort_norm.bedgraph",
        both   = "mapped/both/bg/{sample}_MappedOn_{refbase}_both_sort_norm.bedgraph"
    output:
        unique = "mapped/unique/pb/{sample}_MappedOn_{refbase}_unique_sort_norm.perbase",
        both   = "mapped/both/pb/{sample}_MappedOn_{refbase}_both_sort_norm.perbase"
    log:
        unique = "logs/perBaseCoverage/{sample}_MappedOn_{refbase}_unique_sort_norm_pb.log",
        both   = "logs/perBaseCoverage/{sample}_MappedOn_{refbase}_both_sort_norm_pb.log"
    shell:
        "(bash {SRCDIR}/scripts/perbase_1based_coverage.sh {input.unique} {output.unique}) &> {log.unique}; "
        "(bash {SRCDIR}/scripts/perbase_1based_coverage.sh {input.both} {output.both}) &> {log.both}"

